<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:MatrixClient.Controls"
    xmlns:vm="clr-namespace:MatrixClient.ViewModel;assembly=MatrixClient"
   
    xmlns:converters="clr-namespace:MatrixClient.Converters">

    <!-- setup converters-->
    <converters:BooleanInverterConverter x:Key="BooleanInverterConverter"/>
    <converters:VisibilityInverterConverter x:Key="VisibilityInverterConverter"/>
    <converters:StatusColorConverter x:Key="StatusColorConverter"/>
    <converters:MultiBooleanToVisibilityConverter x:Key="MultiBooleanToVisibilityConverter"/>
    <converters:MultiVisibilityConverter x:Key="MultiVisibilityConverter"/>
    <converters:DataTypeConverter x:Key="DataTypeConverter"/>
    <converters:ByteArrayToBitmapImageConverter x:Key="ByteArrayToBitmapImageConverter"/>
    <!--<converters:NameToAvatarConverter x:Key="NameToAvatarConverter"/>-->
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <converters:ValueConverterGroup x:Key="InvertedVisibilityConverter">
        <converters:BooleanInverterConverter/>
        <BooleanToVisibilityConverter/>
    </converters:ValueConverterGroup>

    <converters:ValueConverterGroup x:Key="NameToAvatarConverter">
        <converters:NameToAvatarConverter/>
        <converters:ByteArrayToBitmapImageConverter/>
    </converters:ValueConverterGroup>

    <Style TargetType="{x:Type local:CrossButton}">

        <!-- Brushes we use for the control. -->
        <Style.Resources>
            <SolidColorBrush x:Key="TabItemCloseButtonNormalBackgroundBrush" Color="#00000000" />
            <SolidColorBrush x:Key="TabItemCloseButtonNormalBorderBrush" Color="#FFFFFFFF" />
            <SolidColorBrush x:Key="TabItemCloseButtonNormalForegroundBrush" Color="#FF8f949b" />

            <SolidColorBrush x:Key="TabItemCloseButtonHoverBackgroundBrush" Color="#FFc13535" />
            <SolidColorBrush x:Key="TabItemCloseButtonHoverForegroundBrush" Color="#FFf9ebeb" />

            <SolidColorBrush x:Key="TabItemCloseButtonPressedBackgroundBrush" Color="#FFc13535" />
            <SolidColorBrush x:Key="TabItemCloseButtonPressedBorderBrush" Color="#FF110033" />
            <SolidColorBrush x:Key="TabItemCloseButtonPressedForegroundBrush" Color="#FFf9ebeb" />
        </Style.Resources>

        <!-- Simple properties that we set. -->
        <Setter Property="SnapsToDevicePixels" Value="false" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Focusable" Value="False" />

        <!-- The control template. -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Background="Transparent">

                        <!-- The background of the button, as an ellipse. -->
                        <Ellipse x:Name="backgroundEllipse" />

                        <!-- A path that renders a cross. -->
                        <Path x:Name="ButtonPath"
                              Margin="3"
                              Stroke="{StaticResource TabItemCloseButtonNormalForegroundBrush}"
                              StrokeThickness="1.5"
                              StrokeStartLineCap="Square"
                              StrokeEndLineCap="Square"
                              Stretch="Uniform"
                              VerticalAlignment="Center"
                              HorizontalAlignment="Center">
                            <Path.Data>
                                <PathGeometry>
                                    <PathGeometry.Figures>
                                        <PathFigure StartPoint="0,0">
                                            <LineSegment Point="25,25"/>
                                        </PathFigure>
                                        <PathFigure StartPoint="0,25">
                                            <LineSegment Point="25,0"/>
                                        </PathFigure>
                                    </PathGeometry.Figures>
                                </PathGeometry>
                            </Path.Data>
                        </Path>
                    </Grid>

                    <!-- The triggers. -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="backgroundEllipse" Property="Fill"
                                    Value="{StaticResource TabItemCloseButtonHoverBackgroundBrush}" />
                            <Setter TargetName="ButtonPath" Property="Stroke" 
                                    Value="{StaticResource TabItemCloseButtonHoverForegroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="backgroundEllipse" Property="Fill"
                                    Value="{StaticResource TabItemCloseButtonPressedBackgroundBrush}" />
                            <Setter TargetName="backgroundEllipse" Property="Stroke"
                                    Value="{StaticResource TabItemCloseButtonPressedBorderBrush}" />
                            <Setter TargetName="ButtonPath" Property="Stroke" 
                                    Value="{StaticResource TabItemCloseButtonPressedForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:PlusButton}">

        <!-- Brushes we use for the control. -->
        <Style.Resources>
            <SolidColorBrush x:Key="TabItemCloseButtonNormalBackgroundBrush" Color="#00000000" />
            <SolidColorBrush x:Key="TabItemCloseButtonNormalBorderBrush" Color="#FFFFFFFF" />
            <SolidColorBrush x:Key="TabItemCloseButtonNormalForegroundBrush" Color="#FF8f949b" />

            <SolidColorBrush x:Key="TabItemCloseButtonHoverBackgroundBrush" Color="#FF2EA664" />
            <SolidColorBrush x:Key="TabItemCloseButtonHoverForegroundBrush" Color="#FFf9ebeb" />

            <SolidColorBrush x:Key="TabItemCloseButtonPressedBackgroundBrush" Color="#FF2EA664" />
            <SolidColorBrush x:Key="TabItemCloseButtonPressedBorderBrush" Color="#FF2EA664" />
            <SolidColorBrush x:Key="TabItemCloseButtonPressedForegroundBrush" Color="#FFf9ebeb" />            
        </Style.Resources>

        <!-- Simple properties that we set. -->
        <Setter Property="SnapsToDevicePixels" Value="false" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Focusable" Value="False" />

        <!-- The control template. -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Background="Transparent">

                        <!-- The background of the button, as an ellipse. -->
                        <Ellipse x:Name="backgroundEllipse" />

                        <!-- A path that renders a plus. -->
                        <Path x:Name="ButtonPath"
                              Margin="3"
                              Stroke="{StaticResource TabItemCloseButtonNormalForegroundBrush}"
                              StrokeThickness="1.5"
                              StrokeStartLineCap="Square"
                              StrokeEndLineCap="Square"
                              Stretch="Uniform"
                              VerticalAlignment="Center"
                              HorizontalAlignment="Center">
                            <Path.Data>
                                <PathGeometry>
                                    <PathGeometry.Figures>
                                        <PathFigure StartPoint="12,0">
                                            <LineSegment Point="12,24"/>
                                        </PathFigure>
                                        <PathFigure StartPoint="0,12">
                                            <LineSegment Point="24,12"/>
                                        </PathFigure>
                                    </PathGeometry.Figures>
                                </PathGeometry>
                            </Path.Data>
                        </Path>
                    </Grid>

                    <!-- The triggers. -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="backgroundEllipse" Property="Fill"
                                    Value="{StaticResource TabItemCloseButtonHoverBackgroundBrush}" />
                            <Setter TargetName="ButtonPath" Property="Stroke" 
                                    Value="{StaticResource TabItemCloseButtonHoverForegroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="backgroundEllipse" Property="Fill"
                                    Value="{StaticResource TabItemCloseButtonPressedBackgroundBrush}" />
                            <Setter TargetName="backgroundEllipse" Property="Stroke"
                                    Value="{StaticResource TabItemCloseButtonPressedBorderBrush}" />
                            <Setter TargetName="ButtonPath" Property="Stroke" 
                                    Value="{StaticResource TabItemCloseButtonPressedForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="tbh1" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="FontWeight" Value="Bold"/>
    </Style>
    <Style x:Key="tbh2" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="FontWeight" Value="Bold"/>
    </Style>
    <Style x:Key="tbh3" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="14"/>
    </Style>

    <Style x:Key="textblock1" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="20"/>
    </Style>
    <Style x:Key="textblock2" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="16"/>
    </Style>

    <Style x:Key="textblock3" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="14"/>
    </Style>

    <Style x:Key="textblock4" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="12"/>
    </Style>

    <Style x:Key="textblock5" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="10"/>
    </Style>

    <Style x:Key="textblock6" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="8"/>
    </Style>

    <Style x:Key="textblockheader" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="24"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Margin" Value="0,0,0,20"/>
    </Style>

    <Style x:Key="textblocktitle" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Margin" Value="0,15,0,5"/>
    </Style>

    <Style x:Key="textblockinput" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="16"/>
    </Style>

    <Style x:Key="textboxinput" TargetType="{x:Type TextBox}">
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Margin" Value="0,0,10,5"/>
    </Style>
    <Style x:Key="passwordinput" TargetType="{x:Type PasswordBox}">
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Margin" Value="0,0,10,5"/>
    </Style>

    <Style x:Key="textblockinputinfo" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource textblock4}" >
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
    </Style>


    <Style x:Key="textblock3gray" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource textblock3}" >
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
    </Style>
    <Style x:Key="textblock4gray" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource textblock4}" >
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
    </Style>
    <Style x:Key="textblock5gray" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource textblock5}" >
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
    </Style>
    <Style x:Key="textblock6gray" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource textblock6}" >
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
    </Style>



    <!--<ControlTemplate x:Key="TextBoxBaseControlTemplate" TargetType="{x:Type TextBoxBase}">
        <Border Background="{TemplateBinding Background}" 
                x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="5">
            <ScrollViewer x:Name="PART_ContentHost"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" TargetName="Bd"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
            <Trigger Property="Width" Value="Auto">
                <Setter Property="MinWidth" Value="100"/>
            </Trigger>
            <Trigger Property="Height" Value="Auto">
                <Setter Property="MinHeight" Value="20"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>-->


    <Style x:Key="textbox1" TargetType="{x:Type TextBox}">
        <Setter Property="FontSize" Value="20"/>
    </Style>
    <Style x:Key="textbox2" TargetType="{x:Type TextBox}">
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Padding" Value="5"/>

    </Style>
    <Style x:Key="textbox3" TargetType="{x:Type TextBox}">
        <Setter Property="FontSize" Value="12"/>
    </Style>

    <Style x:Key="password1" TargetType="{x:Type PasswordBox}">
        <Setter Property="FontSize" Value="20"/>
    </Style>
    <Style x:Key="password2" TargetType="{x:Type PasswordBox}">
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Padding" Value="5"/>
    </Style>
    <Style x:Key="password3" TargetType="{x:Type PasswordBox}">
        <Setter Property="FontSize" Value="12"/>
    </Style>

    <Style x:Key="label1" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="FontWeight" Value="Bold"/>
    </Style>
    <Style x:Key="label2" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="FontWeight" Value="Bold"/>
    </Style>
    <Style x:Key="label3" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="FontWeight" Value="Bold"/>
    </Style>

    <Style x:Key="buttonPrimary" TargetType="{x:Type Button}">
        <Setter Property="BorderBrush" Value="#28B463"/>
        <Setter Property="Background" Value="#28B463"/>      
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Height" Value="35"/>
        <Setter Property="Width" Value="150"/>        
        <Setter Property="Margin" Value="0,0,10,5"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"  BorderThickness="0">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Cursor" Value="Hand"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <!--<Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource {x:Static SystemColors.InactiveBorderColorKey}}"/>
                    </Setter.Value>
                </Setter>-->
                <Setter Property="Background" Value="#ABEBC6"/>
                <Setter Property="Foreground" Value="White"/>
            </Trigger>

        </Style.Triggers>
    </Style>

    <Style x:Key="button" TargetType="{x:Type Button}">
        <Setter Property="BorderBrush" Value="#DDDDDD"/>
        <Setter Property="Background" Value="#DDDDDD"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <!--<Setter Property="Foreground" Value="White"/>-->
        <Setter Property="Height" Value="35"/>
        <Setter Property="Width" Value="150"/>
        <Setter Property="Margin" Value="0,0,10,5"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" BorderThickness="0">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <!--<Setter Property="Background" Value="{TemplateBinding Background}"/>-->
                <Setter Property="Cursor" Value="Hand"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="buttonSmall" TargetType="{x:Type Button}" BasedOn="{StaticResource button}" >
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Height" Value="24"/>
        <Setter Property="Width" Value="100"/>
    </Style>

    <Style x:Key="buttonPrimarySmall" TargetType="{x:Type Button}" BasedOn="{StaticResource buttonPrimary}" >
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Height" Value="24"/>
        <Setter Property="Width" Value="100"/>
    </Style>


    <Style TargetType="{x:Type local:TabControlEx}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:TabControlEx}">
                    <Grid Background="{TemplateBinding Background}"
                              ClipToBounds="True"
                              KeyboardNavigation.TabNavigation="Local"
                              SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0" />
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="0" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="RowDefinition0" Height="Auto" />
                            <RowDefinition x:Name="RowDefinition1" Height="*" />
                        </Grid.RowDefinitions>
                        <StackPanel Orientation="Horizontal">
                            <TabPanel x:Name="HeaderPanel"
                                          Margin="0,0,0,-1"
                                          VerticalAlignment="Bottom"
                                          Panel.ZIndex="1"
                                          IsItemsHost="True"
                                          KeyboardNavigation.TabIndex="1" />
                            <!--<Button Content="+"
                                        FontSize="12"
                                        FontWeight="Bold"
                                        Margin="10, 0, 0, 0"
                                        Width="25"
                                        Command="ApplicationCommands.New" />-->
                        </StackPanel>
                        <Border x:Name="ContentPanel"
                                    Grid.Row="1"
                                    Grid.Column="0"
                                    Background="Transparent"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    KeyboardNavigation.DirectionalNavigation="Contained"
                                    KeyboardNavigation.TabIndex="2"
                                    KeyboardNavigation.TabNavigation="Local">
                            <Grid x:Name="PART_ItemsHolder"
                                      Margin="{TemplateBinding Padding}"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <!--<Style TargetType="TabControl" x:Key="TabControl">

        <Setter Property="behaviors:TabControlBehavior.DoNotCacheControls" Value="True" />
       
    </Style>-->
    <!--<Style TargetType="{x:Type vm:RoomsHeaderItem}">
        <Style.Resources>
            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="#00000000"/>
            <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="#00000000"/>
        </Style.Resources>
    </Style>-->


    <!--https://wpf.2000things.com/tag/listbox/-->
    <SolidColorBrush x:Key="Item.MouseOver.Background" Color="#1F26A0DA"/>
    <SolidColorBrush x:Key="Item.MouseOver.Border" Color="#a826A0Da"/>
    <SolidColorBrush x:Key="Item.SelectedInactive.Background" Color="#3DDADADA"/>
    <SolidColorBrush x:Key="Item.SelectedInactive.Border" Color="#FFDADADA"/>
    <SolidColorBrush x:Key="Item.SelectedActive.Background" Color="#3D26A0DA"/>
    <SolidColorBrush x:Key="Item.SelectedActive.Border" Color="#FF26A0DA"/>

    <Style x:Key="lbDefaultItemContainerStyle" TargetType="{x:Type ListBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="4,1"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>


                        <MultiTrigger>

                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.MouseOver.Border}"/>
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="False"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedInactive.Border}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelectionActive" Value="True"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Border}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
    
    